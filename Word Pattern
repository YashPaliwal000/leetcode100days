Given a pattern and a string s, find if s follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.

 

Example 1:

Input: pattern = "abba", s = "dog cat cat dog"
Output: true
Example 2:

Input: pattern = "abba", s = "dog cat cat fish"
Output: false
Example 3:

Input: pattern = "aaaa", s = "dog cat cat dog"
Output: false
 

Constraints:

1 <= pattern.length <= 300
pattern contains only lower-case English letters.
1 <= s.length <= 3000
s contains only lowercase English letters and spaces ' '.
s does not contain any leading or trailing spaces.
All the words in s are separated by a single space.

Java Solution:

class Solution {
    public boolean wordPattern(String pattern, String s) {
        
        // map Character from pattern -> Word in s
        Map<Character,String> map = new HashMap<>();
        
        // set of words already mapped
        Set<String> takenStrings = new HashSet<>();
        
        String[] strings = s.split(" ");
        
        if(pattern.length()!=strings.length)
            return false;
        
        // iterate through each char in pattern and word in s
        for(int i=0; i<strings.length; i++)
        {
            String currString = strings[i];
            Character currChar = pattern.charAt(i);
            
            // if already map from char to word
            if(map.containsKey(currChar))
            {
                String relatedString = map.get(currChar);
                if(!relatedString.equals(currString))
                    return false;
            }
            
            // else, if didn't see this word yet - add it to map
            else if(takenStrings.add(currString))
            {
                map.put(currChar,currString);
            }
            
            // else, already saw this word and it has other mapping
            else
            {
                return false;
            }
        }
        return true;
    }
}
