Given an integer array nums that may contain duplicates, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10


Java Code:

class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> list = new LinkedList<>();
        backtrack(nums,list,new LinkedList<Integer>(),0);
        return list;
    }
    private void backtrack(int[]nums,List<List<Integer>> list,List<Integer>tempList,int level){
        list.add(new LinkedList<>(tempList));
        for(int i = level;i<nums.length;i++){
            if(i!= level && i>0 && nums[i] == nums[i-1]) continue;
            tempList.add(nums[i]);
            backtrack(nums,list,tempList,i+1);
            tempList.remove(tempList.size()-1);
        }
    }
}
