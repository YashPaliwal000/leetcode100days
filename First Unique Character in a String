Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.

 

Example 1:

Input: s = "leetcode"
Output: 0
Example 2:

Input: s = "loveleetcode"
Output: 2
Example 3:

Input: s = "aabb"
Output: -1
 

Constraints:

1 <= s.length <= 105
s consists of only lowercase English letters.

C++ SOLUTION :

1) The 1st approach is an easy one in which we have simply created an array of size - 26(initialized with 0) as we know the alphabets ranges from 'a' to 'z' to store the count of any particular chracater in the string and then we simply iterate through the string again to check for that character whose count is 1 and return it.


class Solution {
public:
    int firstUniqChar(string s) {
        
        int arr[26] = {0};
        
        for(int i=0;i<s.length();i++) arr[s[i] - 'a']++;
        for(int i=0;i<s.length();i++) 
            if(arr[s[i] - 'a'] == 1) 
                return i;
        return -1;
    }
};

2) Well the 2nd Approach is same like the 1st one but the difference is of Space Complexities while we using unodered map here so S.C. would be O(n) and rest the approach is same.


class Solution {
public:
    int firstUniqChar(string s) {
        
        unordered_map<char, int> count;
        
        for(int i=0;i<s.length();i++) 
            count[s[i]]++;
        
        for(int i=0;i<s.length();i++)
            if(count[s[i]] == 1) 
                return i;
        return -1;
    }
};
