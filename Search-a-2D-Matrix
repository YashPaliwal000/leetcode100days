https://leetcode.com/problems/search-a-2d-matrix/

Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
 

Example 1:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
Example 2:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-104 <= matrix[i][j], target <= 104


Java Solution:

class Solution {
        static boolean searchMatrix(int[][] matrix, int target) {
        int row = 0;
        int col = matrix[0].length-1;
        while(row<matrix.length && col >=0){
            if(target == matrix[row][col]){
                return true;
            }if(target>matrix[row][col]){
                row++;
            }else{
                col -- ;
            }
        }
        return false;
    }
    
}

C++ Solution:

class Solution {
public:
    bool binarySearch(vector<vector<int>>& a, int n, int m, int k, int x)
// x is the row number
{
    // now we simply have to apply binary search as we
    // did in a 1-D array, for the elements in row
    // number
    // x
 
    int l = 0, r = m - 1, mid;
    while (l <= r)
    {
        mid = (l + r) / 2;
 
        if (a[x][mid] == k)
        {
            return true;
        }
 
        if (a[x][mid] > k)
            r = mid - 1;
        if (a[x][mid] < k)
            l = mid + 1;
    }
        return false;
}
 
    bool searchMatrix(vector<vector<int>>& a, int k) {
        int n=a.size();
        int m=a[0].size();
        int l = 0, r = n - 1, mid;
 
    while (l <= r)
    {
        mid = (l + r) / 2;
 
        // we'll check the left and
        // right most elements
        // of the row here itself
        // for efficiency
        if (k == a[mid][0]) // checking leftmost element
        {
            return true;
        }
 
        if (k == a[mid][m - 1]) // checking rightmost
                                // element
        {
            int t = m - 1;
            return true;
        }
 
        if (k > a[mid][0] && k < a[mid][m - 1])
        // this means the element
        // must be within this row
        {  
            return binarySearch(a, n, m, k, mid);;
        }
 
        if (k < a[mid][0])
            r = mid - 1;
        if (k > a[mid][m - 1])
            l = mid + 1;
    }
 return false;
    }
};
