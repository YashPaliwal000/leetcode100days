Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109

C++ SOLUTION:

class Solution {
public:
    int lower_bound(vector<int> &arr, int l, int r, int x)
{
   while (l <= r) {
        int m = (r - l) / 2+l;
        if (arr[m] < x)
            l = m + 1;
        else
            r = m - 1;
    }
    return l;
}
    
    vector<int> searchRange(vector<int>& nums, int target) {
       int idx1 = lower_bound(nums,0,nums.size()-1,target);
       int idx2 = lower_bound(nums,0,nums.size()-1,target+1)-1;
       if (idx1 < nums.size() && nums[idx1] == target)
           return {idx1, idx2};
       else
           return {-1, -1};
    }
};
